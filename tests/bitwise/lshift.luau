local int64 = require("@int64/")

local lshift_n = int64.from_pair(0x00000000, 0x00000001)
for i = 0, 63 do
	local new = int64.lshift(lshift_n, i)
	local expected_bin = string.rep("0", 63 - i) .. "1" .. string.rep("0", i)
	assert(int64.to_bin_string(new) == expected_bin, `{int64.to_hex_string(lshift_n)} << {i} was wrong`)
end
assert(int64.lshift(lshift_n, 64) == vector.zero, `{int64.to_hex_string(lshift_n)} << 64 was wrong`)

local lshift_1 = int64.from_u32(0xcccccccc) -- 11001100_11001100_11001100_11001100
assert(int64.lshift(lshift_1, 0) == lshift_1, "0xcccccccc << 0 was wrong")

assert(int64.to_hex_string(int64.lshift(lshift_1, 01)) == "0000000199999998", "0xcccccccc <<  1 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 02)) == "0000000333333330", "0xcccccccc <<  2 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 03)) == "0000000666666660", "0xcccccccc <<  3 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 04)) == "0000000cccccccc0", "0xcccccccc <<  4 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 05)) == "0000001999999980", "0xcccccccc <<  5 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 06)) == "0000003333333300", "0xcccccccc <<  6 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 07)) == "0000006666666600", "0xcccccccc <<  7 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 08)) == "000000cccccccc00", "0xcccccccc <<  8 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 09)) == "0000019999999800", "0xcccccccc <<  9 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 10)) == "0000033333333000", "0xcccccccc << 10 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 11)) == "0000066666666000", "0xcccccccc << 11 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 12)) == "00000cccccccc000", "0xcccccccc << 12 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 13)) == "0000199999998000", "0xcccccccc << 13 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 14)) == "0000333333330000", "0xcccccccc << 14 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 15)) == "0000666666660000", "0xcccccccc << 15 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 16)) == "0000cccccccc0000", "0xcccccccc << 16 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 17)) == "0001999999980000", "0xcccccccc << 17 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 18)) == "0003333333300000", "0xcccccccc << 18 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 19)) == "0006666666600000", "0xcccccccc << 19 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 20)) == "000cccccccc00000", "0xcccccccc << 20 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 21)) == "0019999999800000", "0xcccccccc << 21 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 22)) == "0033333333000000", "0xcccccccc << 22 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 23)) == "0066666666000000", "0xcccccccc << 23 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 24)) == "00cccccccc000000", "0xcccccccc << 24 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 25)) == "0199999998000000", "0xcccccccc << 25 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 26)) == "0333333330000000", "0xcccccccc << 26 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 27)) == "0666666660000000", "0xcccccccc << 27 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 28)) == "0cccccccc0000000", "0xcccccccc << 28 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 29)) == "1999999980000000", "0xcccccccc << 29 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 30)) == "3333333300000000", "0xcccccccc << 30 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 31)) == "6666666600000000", "0xcccccccc << 31 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 32)) == "cccccccc00000000", "0xcccccccc << 32 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 33)) == "9999999800000000", "0xcccccccc << 33 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 34)) == "3333333000000000", "0xcccccccc << 34 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 35)) == "6666666000000000", "0xcccccccc << 35 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 36)) == "ccccccc000000000", "0xcccccccc << 36 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 37)) == "9999998000000000", "0xcccccccc << 37 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 38)) == "3333330000000000", "0xcccccccc << 38 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 39)) == "6666660000000000", "0xcccccccc << 39 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 40)) == "cccccc0000000000", "0xcccccccc << 40 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 41)) == "9999980000000000", "0xcccccccc << 41 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 42)) == "3333300000000000", "0xcccccccc << 42 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 43)) == "6666600000000000", "0xcccccccc << 43 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 44)) == "ccccc00000000000", "0xcccccccc << 44 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 45)) == "9999800000000000", "0xcccccccc << 45 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 46)) == "3333000000000000", "0xcccccccc << 46 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 47)) == "6666000000000000", "0xcccccccc << 47 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 48)) == "cccc000000000000", "0xcccccccc << 48 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 49)) == "9998000000000000", "0xcccccccc << 49 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 50)) == "3330000000000000", "0xcccccccc << 50 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 51)) == "6660000000000000", "0xcccccccc << 51 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 52)) == "ccc0000000000000", "0xcccccccc << 52 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 53)) == "9980000000000000", "0xcccccccc << 53 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 54)) == "3300000000000000", "0xcccccccc << 54 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 55)) == "6600000000000000", "0xcccccccc << 55 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 56)) == "cc00000000000000", "0xcccccccc << 56 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 57)) == "9800000000000000", "0xcccccccc << 57 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 58)) == "3000000000000000", "0xcccccccc << 58 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 59)) == "6000000000000000", "0xcccccccc << 59 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 60)) == "c000000000000000", "0xcccccccc << 60 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 61)) == "8000000000000000", "0xcccccccc << 61 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 62)) == "0000000000000000", "0xcccccccc << 62 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 63)) == "0000000000000000", "0xcccccccc << 63 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_1, 64)) == "0000000000000000", "0xcccccccc << 64 was wrong")

local lshift_2 = int64.from_u32(0x33333333) -- 00110011_00110011_00110011_00110011
assert(int64.lshift(lshift_2, 0) == lshift_2, "0x33333333 << 0 was wrong")

assert(int64.to_hex_string(int64.lshift(lshift_2, 01)) == "0000000066666666", "0x33333333 <<  1 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 02)) == "00000000cccccccc", "0x33333333 <<  2 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 03)) == "0000000199999998", "0x33333333 <<  3 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 04)) == "0000000333333330", "0x33333333 <<  4 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 05)) == "0000000666666660", "0x33333333 <<  5 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 06)) == "0000000cccccccc0", "0x33333333 <<  6 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 07)) == "0000001999999980", "0x33333333 <<  7 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 08)) == "0000003333333300", "0x33333333 <<  8 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 09)) == "0000006666666600", "0x33333333 <<  9 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 10)) == "000000cccccccc00", "0x33333333 << 10 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 11)) == "0000019999999800", "0x33333333 << 11 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 12)) == "0000033333333000", "0x33333333 << 12 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 13)) == "0000066666666000", "0x33333333 << 13 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 14)) == "00000cccccccc000", "0x33333333 << 14 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 15)) == "0000199999998000", "0x33333333 << 15 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 16)) == "0000333333330000", "0x33333333 << 16 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 17)) == "0000666666660000", "0x33333333 << 17 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 18)) == "0000cccccccc0000", "0x33333333 << 18 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 19)) == "0001999999980000", "0x33333333 << 19 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 20)) == "0003333333300000", "0x33333333 << 20 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 21)) == "0006666666600000", "0x33333333 << 21 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 22)) == "000cccccccc00000", "0x33333333 << 22 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 23)) == "0019999999800000", "0x33333333 << 23 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 24)) == "0033333333000000", "0x33333333 << 24 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 25)) == "0066666666000000", "0x33333333 << 25 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 26)) == "00cccccccc000000", "0x33333333 << 26 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 27)) == "0199999998000000", "0x33333333 << 27 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 28)) == "0333333330000000", "0x33333333 << 28 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 29)) == "0666666660000000", "0x33333333 << 29 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 30)) == "0cccccccc0000000", "0x33333333 << 30 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 31)) == "1999999980000000", "0x33333333 << 31 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 32)) == "3333333300000000", "0x33333333 << 32 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 33)) == "6666666600000000", "0x33333333 << 33 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 34)) == "cccccccc00000000", "0x33333333 << 34 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 35)) == "9999999800000000", "0x33333333 << 35 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 36)) == "3333333000000000", "0x33333333 << 36 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 37)) == "6666666000000000", "0x33333333 << 37 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 38)) == "ccccccc000000000", "0x33333333 << 38 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 39)) == "9999998000000000", "0x33333333 << 39 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 40)) == "3333330000000000", "0x33333333 << 40 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 41)) == "6666660000000000", "0x33333333 << 41 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 42)) == "cccccc0000000000", "0x33333333 << 42 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 43)) == "9999980000000000", "0x33333333 << 43 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 44)) == "3333300000000000", "0x33333333 << 44 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 45)) == "6666600000000000", "0x33333333 << 45 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 46)) == "ccccc00000000000", "0x33333333 << 46 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 47)) == "9999800000000000", "0x33333333 << 47 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 48)) == "3333000000000000", "0x33333333 << 48 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 49)) == "6666000000000000", "0x33333333 << 49 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 50)) == "cccc000000000000", "0x33333333 << 50 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 51)) == "9998000000000000", "0x33333333 << 51 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 52)) == "3330000000000000", "0x33333333 << 52 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 53)) == "6660000000000000", "0x33333333 << 53 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 54)) == "ccc0000000000000", "0x33333333 << 54 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 55)) == "9980000000000000", "0x33333333 << 55 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 56)) == "3300000000000000", "0x33333333 << 56 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 57)) == "6600000000000000", "0x33333333 << 57 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 58)) == "cc00000000000000", "0x33333333 << 58 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 59)) == "9800000000000000", "0x33333333 << 59 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 60)) == "3000000000000000", "0x33333333 << 60 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 61)) == "6000000000000000", "0x33333333 << 61 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 62)) == "c000000000000000", "0x33333333 << 62 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 63)) == "8000000000000000", "0x33333333 << 63 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_2, 64)) == "0000000000000000", "0x33333333 << 64 was wrong")

local lshift_3 = int64.from_pair(0xdeadbeef, 0x77c0ffee) -- 11011110_10101101_10111110_11101111_00000111_11000000_11111111_11101110
assert(int64.lshift(lshift_3, 0) == lshift_3, "0xdeadbeef77c0ffee << 0 was wrong")

assert(int64.to_hex_string(int64.lshift(lshift_3, 01)) == "bd5b7ddeef81ffdc", "0xdeadbeef77c0ffee <<  1 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 02)) == "7ab6fbbddf03ffb8", "0xdeadbeef77c0ffee <<  2 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 03)) == "f56df77bbe07ff70", "0xdeadbeef77c0ffee <<  3 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 04)) == "eadbeef77c0ffee0", "0xdeadbeef77c0ffee <<  4 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 05)) == "d5b7ddeef81ffdc0", "0xdeadbeef77c0ffee <<  5 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 06)) == "ab6fbbddf03ffb80", "0xdeadbeef77c0ffee <<  6 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 07)) == "56df77bbe07ff700", "0xdeadbeef77c0ffee <<  7 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 08)) == "adbeef77c0ffee00", "0xdeadbeef77c0ffee <<  8 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 09)) == "5b7ddeef81ffdc00", "0xdeadbeef77c0ffee <<  9 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 10)) == "b6fbbddf03ffb800", "0xdeadbeef77c0ffee << 10 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 11)) == "6df77bbe07ff7000", "0xdeadbeef77c0ffee << 11 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 12)) == "dbeef77c0ffee000", "0xdeadbeef77c0ffee << 12 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 13)) == "b7ddeef81ffdc000", "0xdeadbeef77c0ffee << 13 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 14)) == "6fbbddf03ffb8000", "0xdeadbeef77c0ffee << 14 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 15)) == "df77bbe07ff70000", "0xdeadbeef77c0ffee << 15 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 16)) == "beef77c0ffee0000", "0xdeadbeef77c0ffee << 16 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 17)) == "7ddeef81ffdc0000", "0xdeadbeef77c0ffee << 17 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 18)) == "fbbddf03ffb80000", "0xdeadbeef77c0ffee << 18 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 19)) == "f77bbe07ff700000", "0xdeadbeef77c0ffee << 19 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 20)) == "eef77c0ffee00000", "0xdeadbeef77c0ffee << 20 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 21)) == "ddeef81ffdc00000", "0xdeadbeef77c0ffee << 21 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 22)) == "bbddf03ffb800000", "0xdeadbeef77c0ffee << 22 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 23)) == "77bbe07ff7000000", "0xdeadbeef77c0ffee << 23 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 24)) == "ef77c0ffee000000", "0xdeadbeef77c0ffee << 24 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 25)) == "deef81ffdc000000", "0xdeadbeef77c0ffee << 25 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 26)) == "bddf03ffb8000000", "0xdeadbeef77c0ffee << 26 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 27)) == "7bbe07ff70000000", "0xdeadbeef77c0ffee << 27 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 28)) == "f77c0ffee0000000", "0xdeadbeef77c0ffee << 28 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 29)) == "eef81ffdc0000000", "0xdeadbeef77c0ffee << 29 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 30)) == "ddf03ffb80000000", "0xdeadbeef77c0ffee << 30 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 31)) == "bbe07ff700000000", "0xdeadbeef77c0ffee << 31 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 32)) == "77c0ffee00000000", "0xdeadbeef77c0ffee << 32 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 33)) == "ef81ffdc00000000", "0xdeadbeef77c0ffee << 33 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 34)) == "df03ffb800000000", "0xdeadbeef77c0ffee << 34 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 35)) == "be07ff7000000000", "0xdeadbeef77c0ffee << 35 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 36)) == "7c0ffee000000000", "0xdeadbeef77c0ffee << 36 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 37)) == "f81ffdc000000000", "0xdeadbeef77c0ffee << 37 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 38)) == "f03ffb8000000000", "0xdeadbeef77c0ffee << 38 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 39)) == "e07ff70000000000", "0xdeadbeef77c0ffee << 39 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 40)) == "c0ffee0000000000", "0xdeadbeef77c0ffee << 40 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 41)) == "81ffdc0000000000", "0xdeadbeef77c0ffee << 41 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 42)) == "03ffb80000000000", "0xdeadbeef77c0ffee << 42 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 43)) == "07ff700000000000", "0xdeadbeef77c0ffee << 43 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 44)) == "0ffee00000000000", "0xdeadbeef77c0ffee << 44 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 45)) == "1ffdc00000000000", "0xdeadbeef77c0ffee << 45 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 46)) == "3ffb800000000000", "0xdeadbeef77c0ffee << 46 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 47)) == "7ff7000000000000", "0xdeadbeef77c0ffee << 47 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 48)) == "ffee000000000000", "0xdeadbeef77c0ffee << 48 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 49)) == "ffdc000000000000", "0xdeadbeef77c0ffee << 49 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 50)) == "ffb8000000000000", "0xdeadbeef77c0ffee << 50 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 51)) == "ff70000000000000", "0xdeadbeef77c0ffee << 51 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 52)) == "fee0000000000000", "0xdeadbeef77c0ffee << 52 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 53)) == "fdc0000000000000", "0xdeadbeef77c0ffee << 53 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 54)) == "fb80000000000000", "0xdeadbeef77c0ffee << 54 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 55)) == "f700000000000000", "0xdeadbeef77c0ffee << 55 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 56)) == "ee00000000000000", "0xdeadbeef77c0ffee << 56 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 57)) == "dc00000000000000", "0xdeadbeef77c0ffee << 57 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 58)) == "b800000000000000", "0xdeadbeef77c0ffee << 58 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 59)) == "7000000000000000", "0xdeadbeef77c0ffee << 59 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 60)) == "e000000000000000", "0xdeadbeef77c0ffee << 60 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 61)) == "c000000000000000", "0xdeadbeef77c0ffee << 61 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 62)) == "8000000000000000", "0xdeadbeef77c0ffee << 62 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 63)) == "0000000000000000", "0xdeadbeef77c0ffee << 63 was wrong")
assert(int64.to_hex_string(int64.lshift(lshift_3, 64)) == "0000000000000000", "0xdeadbeef77c0ffee << 64 was wrong")

for i = -64, -1 do
	local shifted = pcall(int64.lshift, int64.ONE, i)
	assert(not shifted, "lshift allowed negative arguments when it shouldn't")
end

for i = 65, 128 do
	local shifted = int64.lshift(int64.MAX, i)
	assert(shifted == vector.zero, "lshift did not work for values greater than 64")
end

return {}
