local int64 = require("@int64/")

local rshift_n = int64.from_pair(0x80000000, 0x00000000)
for i = 0, 63 do
	local new = int64.rshift(rshift_n, i)
	local expected_bin = string.rep("0", i) .. "1" .. string.rep("0", 63 - i)
	assert(int64.to_bin_string(new) == expected_bin, `{int64.to_hex_string(rshift_n)} >>< {i} was wrong`)
end
assert(int64.rshift(rshift_n, 64) == vector.zero, `{int64.to_hex_string(rshift_n)} >>> 64 was wrong`)

local rshift_1 = int64.from_u32(0xcccccccc) -- 11001100_11001100_11001100_11001100
assert(int64.rshift(rshift_1, 0) == rshift_1, "0xcccccccc >>> 0 was wrong")

assert(int64.to_hex_string(int64.rshift(rshift_1, 01)) == "0000000066666666", "0xcccccccc >>> 01 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 02)) == "0000000033333333", "0xcccccccc >>> 02 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 03)) == "0000000019999999", "0xcccccccc >>> 03 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 04)) == "000000000ccccccc", "0xcccccccc >>> 04 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 05)) == "0000000006666666", "0xcccccccc >>> 05 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 06)) == "0000000003333333", "0xcccccccc >>> 06 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 07)) == "0000000001999999", "0xcccccccc >>> 07 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 08)) == "0000000000cccccc", "0xcccccccc >>> 08 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 09)) == "0000000000666666", "0xcccccccc >>> 09 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 10)) == "0000000000333333", "0xcccccccc >>> 10 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 11)) == "0000000000199999", "0xcccccccc >>> 11 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 12)) == "00000000000ccccc", "0xcccccccc >>> 12 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 13)) == "0000000000066666", "0xcccccccc >>> 13 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 14)) == "0000000000033333", "0xcccccccc >>> 14 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 15)) == "0000000000019999", "0xcccccccc >>> 15 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 16)) == "000000000000cccc", "0xcccccccc >>> 16 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 17)) == "0000000000006666", "0xcccccccc >>> 17 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 18)) == "0000000000003333", "0xcccccccc >>> 18 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 19)) == "0000000000001999", "0xcccccccc >>> 19 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 20)) == "0000000000000ccc", "0xcccccccc >>> 20 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 21)) == "0000000000000666", "0xcccccccc >>> 21 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 22)) == "0000000000000333", "0xcccccccc >>> 22 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 23)) == "0000000000000199", "0xcccccccc >>> 23 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 24)) == "00000000000000cc", "0xcccccccc >>> 24 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 25)) == "0000000000000066", "0xcccccccc >>> 25 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 26)) == "0000000000000033", "0xcccccccc >>> 26 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 27)) == "0000000000000019", "0xcccccccc >>> 27 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 28)) == "000000000000000c", "0xcccccccc >>> 28 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 29)) == "0000000000000006", "0xcccccccc >>> 29 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 30)) == "0000000000000003", "0xcccccccc >>> 30 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 31)) == "0000000000000001", "0xcccccccc >>> 31 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_1, 32)) == "0000000000000000", "0xcccccccc >>> 32 was wrong")
for i = 33, 64 do
	assert(int64.to_hex_string(int64.rshift(rshift_1, i)) == "0000000000000000", `0xcccccccc >>> {i} was wrong`)
end

local rshift_2 = int64.from_u32(0x33333333) -- 00110011_00110011_00110011_00110011
assert(int64.rshift(rshift_2, 0) == rshift_2, "0x33333333 >>> 0 was wrong")

assert(int64.to_hex_string(int64.rshift(rshift_2, 01)) == "0000000019999999", "0x33333333 >>> 01 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 02)) == "000000000ccccccc", "0x33333333 >>> 02 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 03)) == "0000000006666666", "0x33333333 >>> 03 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 04)) == "0000000003333333", "0x33333333 >>> 04 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 05)) == "0000000001999999", "0x33333333 >>> 05 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 06)) == "0000000000cccccc", "0x33333333 >>> 06 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 07)) == "0000000000666666", "0x33333333 >>> 07 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 08)) == "0000000000333333", "0x33333333 >>> 08 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 09)) == "0000000000199999", "0x33333333 >>> 09 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 10)) == "00000000000ccccc", "0x33333333 >>> 10 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 11)) == "0000000000066666", "0x33333333 >>> 11 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 12)) == "0000000000033333", "0x33333333 >>> 12 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 13)) == "0000000000019999", "0x33333333 >>> 13 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 14)) == "000000000000cccc", "0x33333333 >>> 14 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 15)) == "0000000000006666", "0x33333333 >>> 15 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 16)) == "0000000000003333", "0x33333333 >>> 16 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 17)) == "0000000000001999", "0x33333333 >>> 17 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 18)) == "0000000000000ccc", "0x33333333 >>> 18 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 19)) == "0000000000000666", "0x33333333 >>> 19 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 20)) == "0000000000000333", "0x33333333 >>> 20 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 21)) == "0000000000000199", "0x33333333 >>> 21 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 22)) == "00000000000000cc", "0x33333333 >>> 22 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 23)) == "0000000000000066", "0x33333333 >>> 23 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 24)) == "0000000000000033", "0x33333333 >>> 24 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 25)) == "0000000000000019", "0x33333333 >>> 25 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 26)) == "000000000000000c", "0x33333333 >>> 26 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 27)) == "0000000000000006", "0x33333333 >>> 27 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 28)) == "0000000000000003", "0x33333333 >>> 28 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 29)) == "0000000000000001", "0x33333333 >>> 29 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 30)) == "0000000000000000", "0x33333333 >>> 30 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 31)) == "0000000000000000", "0x33333333 >>> 31 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_2, 32)) == "0000000000000000", "0x33333333 >>> 32 was wrong")
for i = 33, 64 do
	assert(int64.to_hex_string(int64.rshift(rshift_2, i)) == "0000000000000000", `0x33333333 >>> {i} was wrong`)
end

local rshift_3 = int64.from_pair(0xdeadbeef, 0x77c0ffee) -- 11011110_10101101_10111110_11101111_00000111_11000000_11111111_11101110
assert(int64.rshift(rshift_3, 0) == rshift_3, "0xdeadbeef77c0ffee >>> 0 was wrong")

assert(int64.to_hex_string(int64.rshift(rshift_3, 01)) == "6f56df77bbe07ff7", "0xdeadbeef77c0ffee >>> 01 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 02)) == "37ab6fbbddf03ffb", "0xdeadbeef77c0ffee >>> 02 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 03)) == "1bd5b7ddeef81ffd", "0xdeadbeef77c0ffee >>> 03 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 04)) == "0deadbeef77c0ffe", "0xdeadbeef77c0ffee >>> 04 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 05)) == "06f56df77bbe07ff", "0xdeadbeef77c0ffee >>> 05 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 06)) == "037ab6fbbddf03ff", "0xdeadbeef77c0ffee >>> 06 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 07)) == "01bd5b7ddeef81ff", "0xdeadbeef77c0ffee >>> 07 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 08)) == "00deadbeef77c0ff", "0xdeadbeef77c0ffee >>> 08 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 09)) == "006f56df77bbe07f", "0xdeadbeef77c0ffee >>> 09 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 10)) == "0037ab6fbbddf03f", "0xdeadbeef77c0ffee >>> 10 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 11)) == "001bd5b7ddeef81f", "0xdeadbeef77c0ffee >>> 11 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 12)) == "000deadbeef77c0f", "0xdeadbeef77c0ffee >>> 12 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 13)) == "0006f56df77bbe07", "0xdeadbeef77c0ffee >>> 13 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 14)) == "00037ab6fbbddf03", "0xdeadbeef77c0ffee >>> 14 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 15)) == "0001bd5b7ddeef81", "0xdeadbeef77c0ffee >>> 15 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 16)) == "0000deadbeef77c0", "0xdeadbeef77c0ffee >>> 16 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 17)) == "00006f56df77bbe0", "0xdeadbeef77c0ffee >>> 17 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 18)) == "000037ab6fbbddf0", "0xdeadbeef77c0ffee >>> 18 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 19)) == "00001bd5b7ddeef8", "0xdeadbeef77c0ffee >>> 19 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 20)) == "00000deadbeef77c", "0xdeadbeef77c0ffee >>> 20 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 21)) == "000006f56df77bbe", "0xdeadbeef77c0ffee >>> 21 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 22)) == "0000037ab6fbbddf", "0xdeadbeef77c0ffee >>> 22 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 23)) == "000001bd5b7ddeef", "0xdeadbeef77c0ffee >>> 23 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 24)) == "000000deadbeef77", "0xdeadbeef77c0ffee >>> 24 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 25)) == "0000006f56df77bb", "0xdeadbeef77c0ffee >>> 25 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 26)) == "00000037ab6fbbdd", "0xdeadbeef77c0ffee >>> 26 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 27)) == "0000001bd5b7ddee", "0xdeadbeef77c0ffee >>> 27 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 28)) == "0000000deadbeef7", "0xdeadbeef77c0ffee >>> 28 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 29)) == "00000006f56df77b", "0xdeadbeef77c0ffee >>> 29 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 30)) == "000000037ab6fbbd", "0xdeadbeef77c0ffee >>> 30 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 31)) == "00000001bd5b7dde", "0xdeadbeef77c0ffee >>> 31 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 32)) == "00000000deadbeef", "0xdeadbeef77c0ffee >>> 32 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 33)) == "000000006f56df77", "0xdeadbeef77c0ffee >>> 33 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 34)) == "0000000037ab6fbb", "0xdeadbeef77c0ffee >>> 34 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 35)) == "000000001bd5b7dd", "0xdeadbeef77c0ffee >>> 35 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 36)) == "000000000deadbee", "0xdeadbeef77c0ffee >>> 36 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 37)) == "0000000006f56df7", "0xdeadbeef77c0ffee >>> 37 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 38)) == "00000000037ab6fb", "0xdeadbeef77c0ffee >>> 38 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 39)) == "0000000001bd5b7d", "0xdeadbeef77c0ffee >>> 39 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 40)) == "0000000000deadbe", "0xdeadbeef77c0ffee >>> 40 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 41)) == "00000000006f56df", "0xdeadbeef77c0ffee >>> 41 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 42)) == "000000000037ab6f", "0xdeadbeef77c0ffee >>> 42 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 43)) == "00000000001bd5b7", "0xdeadbeef77c0ffee >>> 43 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 44)) == "00000000000deadb", "0xdeadbeef77c0ffee >>> 44 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 45)) == "000000000006f56d", "0xdeadbeef77c0ffee >>> 45 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 46)) == "0000000000037ab6", "0xdeadbeef77c0ffee >>> 46 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 47)) == "000000000001bd5b", "0xdeadbeef77c0ffee >>> 47 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 48)) == "000000000000dead", "0xdeadbeef77c0ffee >>> 48 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 49)) == "0000000000006f56", "0xdeadbeef77c0ffee >>> 49 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 50)) == "00000000000037ab", "0xdeadbeef77c0ffee >>> 50 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 51)) == "0000000000001bd5", "0xdeadbeef77c0ffee >>> 51 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 52)) == "0000000000000dea", "0xdeadbeef77c0ffee >>> 52 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 53)) == "00000000000006f5", "0xdeadbeef77c0ffee >>> 53 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 54)) == "000000000000037a", "0xdeadbeef77c0ffee >>> 54 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 55)) == "00000000000001bd", "0xdeadbeef77c0ffee >>> 55 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 56)) == "00000000000000de", "0xdeadbeef77c0ffee >>> 56 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 57)) == "000000000000006f", "0xdeadbeef77c0ffee >>> 57 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 58)) == "0000000000000037", "0xdeadbeef77c0ffee >>> 58 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 59)) == "000000000000001b", "0xdeadbeef77c0ffee >>> 59 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 60)) == "000000000000000d", "0xdeadbeef77c0ffee >>> 60 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 61)) == "0000000000000006", "0xdeadbeef77c0ffee >>> 61 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 62)) == "0000000000000003", "0xdeadbeef77c0ffee >>> 62 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 63)) == "0000000000000001", "0xdeadbeef77c0ffee >>> 63 was wrong")
assert(int64.to_hex_string(int64.rshift(rshift_3, 64)) == "0000000000000000", "0xdeadbeef77c0ffee >>> 64 was wrong")

for i = -64, -1 do
	local shifted = pcall(int64.rshift, int64.ONE, i)
	assert(not shifted, "rshift allowed negative arguments when it shouldn't")
end

for i = 65, 128 do
	local shifted = int64.rshift(int64.MAX, i)
	assert(shifted == vector.zero, "rshift did not work for values greater than 64")
end

return {}
